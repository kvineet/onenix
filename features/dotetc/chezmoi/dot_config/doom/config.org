#+title: KVineet's Emacs Configuration
#+author: Vineet Kulkarni
#+email: mail@kvineet.in
#+startup: overview
#+filetags: :NOTSTUCK:
#+TODO: TODO(t) | DONE(d)
#+TODO: | .(.)
#+property: header-args :comments no :noweb no-export :mkdirp yes :tangle no
#+html_head: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>
https://github.com/tecosaur/emacs-config/blob/master/config.org
* Preamble
** . License
#+name: license
#+attr_html: :collapsed t
#+begin_src emacs-lisp
;; This file has been generated from config.org file. DO NOT EDIT.
;; Sources are available from https://github.com/kvineet/kvineet.emacs

;; Copyright (C) 2023 Vineet Kulkarni

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; For a full copy of the GNU General Public License
;; see <https://www.gnu.org/licenses/>.


#+end_src
** . headers
Make these files run (slightly) faster with lexical binding
Set up header for =init.el=
#+BEGIN_SRC emacs-lisp :tangle init.el
;;; $DOOMDIR/init.el -*- lexical-binding: t; -*-
;;; DO NOT MODIFY - this file gets autogenerated from ~/.config/emacs/config.org
<<license>>
#+END_SRC

Set up header for =config.el=
#+BEGIN_SRC emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;; DO NOT MODIFY - this file gets autogenerated from ~/.config/emacs/config.org
<<license>>
#+END_SRC

Set up header for =packages.el=
#+BEGIN_SRC emacs-lisp :tangle packages.el
;;; $DOOMDIR/packages.el -*- lexical-binding: t; -*-
;;; DO NOT MODIFY - this file gets autogenerated from ~/.config/emacs/config.org
<<license>>
#+END_SRC
** helper functions
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun is-work-machine ()
  "If running on work machine t. nil otherwise."
  (if (string-match-p "MSFT" (system-name)) t nil))

(defun is-pc ()
  "If running on home PC machine t. nil otherwise."
  (if (string-match-p "pc" (system-name)) t nil))
#+END_SRC
** snippets for this file
Use =srcdc= snippet to create source block for =config.el= file. =srcdp= snippet
creates source block for =init.el=, while =srcdp= snippet creates source block for
=packages.el=
*** =init=
#+BEGIN_SRC snippet :tangle "snippets/org-mode/src-doom-init"
# -*- mode: snippet -*-
# name: src-doom-init
# key: srcdi
# --
,#+BEGIN_SRC emacs-lisp :tangle init.el
$1
,#+END_SRC
#+END_SRC
*** =config=
#+BEGIN_SRC snippet :tangle "snippets/org-mode/src-doom-config"
# -*- mode: snippet -*-
# name: src-doom-config
# key: srcdc
# --
#+BEGIN_SRC emacs-lisp :tangle config.el
$1
,#+END_SRC
#+END_SRC
*** =package=
#+BEGIN_SRC snippet :tangle "snippets/org-mode/src-doom-packages"
# -*- mode: snippet -*-
# name: src-doom-packages
# key: srcdp
# --
,#+BEGIN_SRC emacs-lisp :tangle packages.el
$1
,#+END_SRC
#+END_SRC
*** =module-init=
#+BEGIN_SRC snippet :tangle "snippets/org-mode/src-doom-module-init"
# -*- mode: snippet -*-
# name: src-doom-module-init
# key: srcdmi
# --
,#+BEGIN_SRC emacs-lisp :tangle modules/${1:mod}/init.el
$2
,#+END_SRC
#+END_SRC
*** =module-package=
#+BEGIN_SRC snippet :tangle "snippets/org-mode/src-doom-module-packages"
# -*- mode: snippet -*-
# name: src-doom-module-packages
# key: srcdmp
# --
,#+BEGIN_SRC emacs-lisp :tangle modules/${1:mod}/packages.el
$2
,#+END_SRC
#+END_SRC
*** =module-config=
#+BEGIN_SRC snippet :tangle "snippets/org-mode/src-doom-module-config"
# -*- mode: snippet -*-
# name: src-doom-module-config
# key: srcdmc
# --
,#+BEGIN_SRC emacs-lisp :tangle modules/${1:mod}/config.el
$2
,#+END_SRC
#+END_SRC
* Basic Configuration
** Name
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq user-full-name "Vineet Kulkarni")
#+END_SRC
** Email
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq user-mail-address "mail@kvineet.in")
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq doom-theme 'doom-dracula)
#+END_SRC
** Files and Directories
*** . Helper functions
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun vk/sync-directory (FILE)
  "returns the sync-directory or path specified in sync directory"
  (if FILE
      (expand-file-name FILE cloud--snycthing-directory)))

(defun vk/home-directory (FILE)
  "returns path in home directory based on the OS"
  (expand-file-name FILE (getenv "HOME")))
#+END_SRC

*** Cloud
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq cloud--snycthing-directory (cond
                                  ((is-pc) (vk/home-directory "sync"))
                                  ((is-work-machine) (vk/home-directory "sync/sync"))))
#+END_SRC
*** Org
Define paths related to org files.
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-directory (vk/sync-directory "org"))
#+END_SRC
**** . Helper function
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun vk/org-directory (FILE)
  "Returns the path in org-directory"
  (expand-file-name FILE org-directory))
#+END_SRC
**** =denoate= directory
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq denote-directory (vk/org-directory "notes"))
#+END_SRC
***** . Helper function
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun vk/denote-directory (FILE)
  "Returns the path in denote-directory"
  (expand-file-name FILE denote-directory))
#+END_SRC
**** =journal= directory
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq denote-journal-directory (vk/org-directory "journal"))
#+END_SRC

**** agenda files
Use the usual files for agenda
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-agenda-files (list
                        (vk/org-directory "gtd.org")
                        (vk/org-directory "Backlog.org")))
#+END_SRC
Then also include files tagged ~_project~ from ~denote~ directory
#+begin_src emacs-lisp :tangle config.el
(dolist (org-file (directory-files (denote-directory) t "_project" nil))
        (add-to-list 'org-agenda-files org-file))
#+end_src

*** COMMENT ledger
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq ledger-directory (expand-file-name "accounting" vault-directory))
#+END_SRC
*** leetcode
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq leetcode-directory
      (vk/home-directory "projects/leetcode"))
#+END_SRC
*** E-book Library Root
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq ebooks-root-directory (expand-file-name "Ebooks" (expand-file-name "webDav" (expand-file-name "srv" "/"))))
#+END_SRC
** Font Configuration
#+BEGIN_SRC emacs-lisp :tangle config.el
(defvar vk/default-font-size 24)
(defvar vk/big-font-size 36)
(defvar vk/default-variable-font-size 24)
(defvar vk/default-font "CaskaydiaCove Nerd Font")
;;(defvar vk/default-font "Iosevka Nerd Font")
(defvar vk/fixed-pitch-font "Iosevka Term Extended")
(defvar vk/variable-pitch-font "CaskaydiaCove Nerd Font")
;;(defvar vk/variable-pitch-font "Iosevka Nerd Font")
#+END_SRC

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

 + `doom-font'
 + `doom-variable-pitch-font'
 + `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.

They all accept either a font-spec, =font string ("Input Mono-12")=, or ~xlfd font
string~.
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq doom-font
      (font-spec :family vk/default-font :width 'normal :weight 'regular :slant 'normal :size vk/default-font-size))
(setq doom-big-font
      (font-spec :family vk/default-font :size vk/big-font-size))
(setq doom-variable-pitch-font
      (font-spec :family vk/variable-pitch-font  :width 'normal :weight 'regular :slant 'normal :size vk/default-variable-font-size))
(setq doom-symbol-font (font-spec :family vk/default-font :width 'normal :weight 'regular :slant 'normal ))
#+END_SRC
* Doom modules
** . =init.el=
#+BEGIN_SRC emacs-lisp :tangle init.el
(doom!
       :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;; tty               ; improve the terminal Emacs experience

       :lang
       <<doom-lang>>

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       <<doom-app>>

       :config
       <<doom-config>>

       <<doom-private>>
       )
#+END_SRC
** apps
#+name: doom-apps
#+begin_src emacs-lisp
;;calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
;;(rss +org)        ; emacs as an RSS reader;;calendar
#+end_src
** completion
#+name: doom-completion
#+begin_src emacs-lisp
;;(company
;;+childframe)
(corfu
  +icons
  +orderless
  +dabbrev)
;helm              ; the *other* search engine for love and life
;ido               ; the other *other* search engine...
; (ivy
; +icons
; +prescient)
(vertico
 +childframe
 +icons)
#+end_src
** checkers
#+name: doom-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
(spell
 +flyspell
 +aspell
 +everywhere
 )
grammar           ; tasing grammar mistake every you make
#+end_src
** editor
#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format +onsave)  ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
;;multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
;;word-wrap         ; soft wrapping with language-aware indent
#+end_src
** Emacs
#+name: doom-emacs
#+begin_src emacs-lisp
dired             ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
ibuffer         ; interactive buffer management
undo
vc                ; version-control and Emacs, sitting in a tree
#+end_src
** language support
#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
;;(cc
;;  +tree-sitter)                                      ; C/C++/Obj-C madness
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
(csharp            ; unity, .NET, and mono shenanigans
 +dotnet
 +lsp
 +tree-sitter)
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
(go +lsp)         ; the hipster dialect
;;(haskell
;; +dante
;; +lsp
;; +ghcide)
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
(json +lsp)
;; (java +lsp)
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
;;latex             ; writing papers in Emacs has never been so fun
;;lean
;;factor
ledger            ; an accounting system in Emacs
;;lua               ; one-based indices? one-based indices
markdown          ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
(nix               ; I hereby declare "nix geht mehr!"
 +tree-sitter
 +lsp)
;;ocaml             ; an objective camel
(org
 +dragndrop
 +gnuplot
 +hugo
 ;;+journal
 +jupyter
 +pomodoro
 +noter
 +pandoc
 +present
 ;;+pretty
 ;;+roam2
 )
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
;;(python
;; +lsp)            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
 +lsp
 +tree-sitter)
;;scala             ; java, but good
;;scheme            ; a fully conniving family of lisps
(sh +lsp)
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
(yaml +lsp)
#+end_src
** UI
#+name: doom-ui
#+begin_src emacs-lisp
deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
doom-quit         ; DOOM quit-message prompts when you quit Emacs
;;(emoji            ; EMOJI support
;; +unicode
;; +github)
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
indent-guides     ; highlighted indent columns
(ligatures
 +extra)
minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup   ; tame sudden yet inevitable temporary windows
 +all
 +defaults)
;;tabs              ; a tab bar for Emacs
(treemacs          ; a project drawer, like neotree but cooler
 +lsp)
;;unicode           ; extended unicode support for various languages
(vc-gutter +pretty)         ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
(window-select     ; visually switch windows
 +numbers
 +switch-window)
workspaces        ; tab emulation, persistence & separate workspaces
zen               ; distraction-free coding or writing
#+end_src

** Terms
#+name: doom-term
#+begin_src emacs-lisp
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs
#+end_src
** Tools
#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
(debugger
 +lsp)
direnv
(docker
 +lsp)
editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval
 +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
(lookup              ; navigate your code and its documentation
 +dictionary
 +docsets
 +offline)
(lsp
 +peek)
magit             ; a git porcelain for Emacs
make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
;;rgb               ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
tree-sitter
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+end_src
** doom configuration
#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src
* Private modules
** . Private modules declaration
#+name: doom-private
#+begin_src emacs-lisp
:
:myui
focus
ligatures
svg

:org
(denote
 +journal
 +consult
 +silo
 +menu)
(draw +krita)
orgql
(pretty +ligatures +svg)
protocol
(qol +calfw)
export

:dev
leetcode

:emacs
shortcuts
;calibre

:latex
default
#+end_src

** emacs
*** shortcuts
#+BEGIN_SRC emacs-lisp :tangle modules/emacs/shortcuts/config.el
(defun vk/open-gtd-file()
  "Opens GTD file in current window"
  (interactive)
  (find-file (vk/org-directory "gtd.org")))

(map!
 :leader
 :map global-map
 :desc "Open GTD file" "f g" #'vk/open-gtd-file)
#+END_SRC
*** Books
#+BEGIN_SRC emacs-lisp :tangle "modules/emacs/calibre/packages.el"
(package! calibredb
    :recipe (:host github
             :repo "chenyanming/calibredb.el"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle modules/emacs/calibre/config.el
(use-package! calibredb)
#+END_SRC
** UI
*** svg
Making Emacs look good is first priority, actually working in it is second. this adds a svg support to the emacs.
#+BEGIN_SRC emacs-lisp :tangle modules/myui/svg/packages.el
;; -*- no-byte-compile: t; -*-
<<license>>
(package! svg-tag-mode)
#+end_src
Configure the svg package
#+BEGIN_SRC emacs-lisp :tangle modules/myui/svg/config.el
;; -*- no-byte-compile: t; -*-
<<license>>
(use-package! svg-tag-mode
  :hook (org-mode . svg-tag-mode)
  :config
  (defun org-agenda-show-svg ()
    (let* ((case-fold-search nil)
           (keywords (mapcar #'svg-tag--build-keywords svg-tag--active-tags))
           (keyword (car keywords)))
      (while keyword
        (save-excursion
          (while (re-search-forward (nth 0 keyword) nil t)
            (overlay-put (make-overlay
                          (match-beginning 0) (match-end 0))
                         'display  (nth 3 (eval (nth 2 keyword)))) ))
        (pop keywords)
        (setq keyword (car keywords)))))
  (add-hook 'org-agenda-finalize-hook #'org-agenda-show-svg))
#+END_SRC
*** focus
=Focus= on the line at hand
#+BEGIN_SRC emacs-lisp :tangle modules/myui/focus/packages.el
<<license>>
(package! focus)
#+END_SRC
Keybindings
#+BEGIN_SRC emacs-lisp :tangle modules/myui/focus/config.el
<<license>>
(map!
   :leader
   :map global-map
   :desc "toggle focus mode" "t o" #'focus-mode)
#+END_SRC
*** Extra Ligatures symbols
#+BEGIN_SRC emacs-lisp :tangle modules/myui/ligatures/config.el
<<license>>
(plist-put! +ligatures-extra-symbols
            :checkbox      "☐"
            :pending       "◼"
            :checkedbox    "☑"
            :list_property "∷"
            :results       "➲"
            :filetags      "📍"
            :property      "☸"
            :properties    "⚙"
            :end           "∎"
            :options       "⌥"
            :title         "⏣"
            :subtitle      "⎊"
            :name          "⁍"
            :author        "⎉"
            :email         "✉"
            :date          "🗓"
            :latex_header  "⇥"
            :latex_class   "Ⲗ"
            :beamer_header "↠"
            :begin_quote   "❮"
            :end_quote     "❯"
            :begin_export  "⯮"
            :end_export    "⯬"
            :identifier    "𑗕"
           :em_dash       "—")
#+END_SRC

*** Ellipsis
Ellipsis are drop downs
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq truncate-string-ellipsis "▾"
      org-ellipsis "▾"
      which-key-ellipsis "▾"
      magit-ellipsis '((margin
                       (8230 . ">"))
                      (t
                       (8230 . "▾"))))
#+END_SRC
*** Line Numbers
I am still unsure whether visual line mode is good or bad when it comes to tracking changes in git. but I am setting it on for now.

I like relative numbers for quick vim actions.
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq visual-line-mode t
      display-line-numbers-type 'visual)
#+END_SRC
*** Modline
Configure =modline= to show some additional information
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq doom-modeline-project-detection 'projectile
      doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t
      doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)
      doom-modeline-enable-word-count t
      doom-modeline-env-version t)
#+END_SRC

** Org modules
*** =org-ql=
#+BEGIN_SRC emacs-lisp :tangle modules/org/orgql/packages.el
<<license>>

(package! org-ql :recipe (:host github :repo "alphapapa/org-ql"))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle modules/org/orgql/config.el
(use-package! org-ql
  )
#+END_SRC

*** pretty
**** center org buffers
#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/config.el
(defun vk/org-mode-visual-fill ()
  (setq visual-fill-column-width 120
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
(use-package! visual-fill-column
  :hook (org-mode . vk/org-mode-visual-fill))
#+END_SRC
**** better font faces
Replace list hyphen with dot
#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/config.el
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) " "))))))
#+END_SRC
Set faces for heading levels
#+name: org-faces
#+BEGIN_SRC emacs-lisp
(dolist (face '((org-level-1 . 1.4)
                (org-level-2 . 1.3)
                (org-level-3 . 1.2)
                (org-level-4 . 1.15)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)
                (org-document-title . 2.0)))
  (set-face-attribute (car face) nil :font vk/default-font :weight 'regular :height (cdr face)))


#+END_SRC

#+RESULTS: org-faces

Ensure that anything that should be fixed-pitch in Org files appears that way
#+name: fixed-pitch-faces
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+END_SRC
Set all this in hook
#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/config.el
(defun vk/org-font-face-setup()
  "Set up org-level faces."
  <<org-faces>>
  <<fixed-pitch-faces>>
  )
(add-hook 'org-mode-hook (lambda () (vk/org-font-face-setup)))
#+END_SRC

**** appear
Make invisible parts of Org elements appear visible while editing.

Editing markup in =org= can be fiddly sometimes. =org-appear= makes this easier by
making the elements appear when  cursor is on them.
- *show ~emphasis~ markers*
- /show =submarkers= as well/
- show [[https://google.com][Links are great]]

#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/packages.el
;; -*- no-byte-compile: t; -*-
<<license>>
(package! org-appear
  :recipe (:type git
           :flavor melpa
           :host github
           :repo "awth13/org-appear")
)
#+end_src

- [2024-08-06 Tue] moved back to main branch. ~doom upgrade~ was failing with ~org-9.7-fixes~ branch. Moving to main branch shows no regression.

- [2024-07-17 Wed] After fix in [[https://github.com/awth13/org-appear/pull/59][#59]] got merged, pinning is no longer required. However, [[https://github.com/awth13/org-appear/issues/53#issuecomment-2231055635][Comment from maintainer]] suggests moving to =org-9.7-fixes= branch.

- [2025-07-03 Thu] +In [[https://github.com/awth13/org-appear/pull/48][this commit]], =org-fold= support got added to =org-appear=. While this change intended to fix the issue with link. It appears to break it on my configuration. thus pinning the =org-appear= to commit before this change.+

#+BEGIN_SRC emacs-lisp :tangle "modules/org/pretty/config.el"
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-hide-emphasis-markers t)
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks t
        org-appear-autoentities t))
#+END_SRC
**** org-superstar
#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/packages.el
(package! org-superstar :recipe (:host github :repo "integral-dw/org-superstar-mode"))
#+end_src

#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/config.el
(use-package! org-superstar ; "prettier" bullets
  :hook (org-mode . org-superstar-mode)
  :config
  ;; Make leading stars truly invisible, by rendering them as spaces!
  (setq org-superstar-leading-bullet ?\s
        org-superstar-leading-fallback ?\s
        org-hide-leading-stars nil
        org-superstar-headline-bullets-list '("💠" "❄" "🔷" "🟦")
        org-superstar-todo-bullet-alist
        '(("TODO" . 9744)
          ("[ ]"  . 9744)
          ("DONE" . 9745)
          ("[X]"  . 9745))))
#+END_SRC
**** ligatures
#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/config.el
(when (and (modulep! :myui ligatures) (modulep! :org pretty +ligatures))
  (set-ligatures! 'org-mode
    :title "#+title"
    :author "#+author"
    :email "#+email"
    :options "#+startup"
    :properties "#+todo"
    :properties "#+property"
    :options "#+html_head"
    :date "#+date"
    :filetags "#+filetags"
    :identifier "#+identifier"
    ))
#+END_SRC

**** SVG tags
***** . Helper functions
generate =svg-tag= based on org progress cookie
#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/config.el
(defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
(defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
(defconst day-re "[A-Za-z]\\{3\\}")
(defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

(defun svg-progress-percent (value)
  (save-match-data
   (svg-image (svg-lib-concat
               (svg-lib-progress-bar  (/ (string-to-number value) 100.0)
                                 nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 20 :height 0.4)
               (svg-lib-tag (concat value "%")
                            nil :stroke 0 :margin 0)) :ascent 'center)))

(defun svg-progress-count (value)
  (save-match-data
    (let* ((seq (split-string value "/"))
           (count (if (stringp (car seq))
                      (float (string-to-number (car seq)))
                    0))
           (total (if (stringp (cadr seq))
                      (float (string-to-number (cadr seq)))
                    1000)))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 20 :height 0.4)
                  (svg-lib-tag value nil
                               :stroke 0 :margin 0)) :ascent 'center))))

#+END_SRC

***** custom faces
#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/config.el
(defface svg-tag-org-done
  '((t :foreground "#55b56d"
     :background "#373844"
     :weight bold))
  "face for org-done svg tag"
  :group 'org-mode)
#+END_SRC
***** tags
****** priorities
#+name: svg-tag--org-priorities
#+BEGIN_SRC emacs-lisp
("\\[#A\\]" . ((lambda (tag) (svg-tag-make "⚑" :beg 0 :end 1 :margin 1 :face 'orderless-match-face-1))))
("\\[#B\\]" . ((lambda (tag) (svg-tag-make "⇧" :beg 0 :end 1 :margin 1 :face 'orderless-match-face-3))))
("\\[#C\\]" . ((lambda (tag) (svg-tag-make "■" :beg 0 :end 1 :margin 1 :face 'orderless-match-face-0))))
("\\[#D\\]" . ((lambda (tag) (svg-tag-make "D" :beg 0 :end 1 :margin 1 :face 'orderless-match-face-2))))
("\\[#[E-Z]\\]" . ((lambda (tag) (svg-tag-make tag :beg 2 :end 3 :margin 1))))
#+END_SRC
****** ~todo~ states
******* generic
#+name: svg-tag--org-todo-states-generic
#+BEGIN_SRC emacs-lisp
("*\+ \\(TODO\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :inverse t :face 'org-todo :radius 8))))
("*\+ \\(STRT\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :face '+org-todo-active :inverse t :radius 8))))
("*\+ \\(WAIT\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :inverse t :face '+org-todo-onhold :radius 8))))
("*\+ \\(DONE\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :face 'svg-tag-org-done :radius 8))))
#+END_SRC
******* game goblin
#+name: svg-tag--org-todo-states-games
#+BEGIN_SRC emacs-lisp
("*\+ \\(WANT\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :face 'org-todo :radius 8))))
;; LIBRARY already in books
("*\+ \\(GLOWUP\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 6 :margin 1 :face '+org-todo-onhold :radius 8))))
("*\+ \\(PLAYING\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 7 :margin 1 :inverse t :face '+org-todo-active :radius 8))))
("*\+ \\(PLAYED\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 6 :margin 1 :inverse t :face 'svg-tag-org-done :radius 8))))
("*\+ \\(ABANDONED\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 9 :margin 1 :face '+org-todo-cancel :radius 8))))
#+END_SRC
******* book goblin
#+name: svg-tag--org-todo-states-books
#+BEGIN_SRC emacs-lisp
("*\+ \\(LIBRARY\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 7 :margin 1 :face '+org-todo-project :radius 7))))
("*\+ \\(KINDLE\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 6 :margin 1 :face '+org-todo-onhold :radius 6))))
("*\+ \\(READING\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 7 :margin 1 :inverse t :face '+org-todo-active :radius 8))))
("*\+ \\(READ\\) " . ((lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :inverse t :face 'svg-tag-org-done :radius 8))))
#+END_SRC
******* . bring it all together
#+name: svg-tag--org-todo-states
#+BEGIN_SRC emacs-lisp
<<svg-tag--org-todo-states-generic>>
<<svg-tag--org-todo-states-games>>
<<svg-tag--org-todo-states-books>>
#+END_SRC
****** task progress
#+name: svg-tag--org-progress
#+BEGIN_SRC emacs-lisp
("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag) (svg-progress-percent (substring tag 1 -2)))))
("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag) (svg-progress-count (substring tag 1 -1)))))
#+END_SRC
****** org-tags
#+name: svg-tag--org-tags
#+BEGIN_SRC emacs-lisp
(":#[A-Za-z0-9]+" . ((lambda (tag) (svg-tag-make tag :beg 2 :radius 5 :margin 0.2))))
(":#[A-Za-z0-9]+:$" . ((lambda (tag) (svg-tag-make tag :beg 2 :end -1 :radius 5 :margin 0.2))))
(":@[A-Za-z0-9]+:$" . ((lambda (tag) (svg-tag-make tag :beg 2 :end -1 :radius 5 :face 'smerge-lower :margin 0.2))))
(":T[X|L|M|S]" . ((lambda (tag) (svg-tag-make tag :beg 2 :end 3 :radius 20 :face 'smerge-upper :margin 0.2))))
(":T[X|L|M|S]:$" . ((lambda (tag) (svg-tag-make tag :beg 2 :end 3 :radius 20 :face 'smerge-upper :margin 0.2))))
#+END_SRC
****** date and time
#+name: svg-tag--org-datetime
#+BEGIN_SRC emacs-lisp
<<svg-tag--org-inactive-datetime>>
<<svg-tag--org-active-datetime>>
<<svg-tag--org-datetime-repeat>>
#+END_SRC
******* Inactive date-time
#+name: svg-tag--org-inactive-datetime
#+begin_src emacs-lisp
(,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) . ((lambda (tag) (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date :radius 6))))
(,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) . ((lambda (tag) (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date :radius 6))))
(,(format "\\(\\[%s\\]\\)" date-re) . ((lambda (tag) (svg-tag-make tag :beg 0 :end -1 :margin 0 :face 'org-date))))
#+end_src
******* active date-time
#+name: svg-tag--org-active-datetime
#+begin_src emacs-lisp
;;opening
("\\(<[0-9]\\{1\\}\\)[0-9]\\{3\\}-" . ((lambda (tag) (svg-tag-make tag :beg 1 :end 1 :face 'org-date :radius 12 :crop-right t :margin 0))))
;; year
("<\\([0-9]\\{4\\}-\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 1) :face 'org-date :margin -1 :crop-left t :crop-right t))))
;; month
("<[0-9]\\{4\\}-\\([0-9]\\{2\\}-\\)" . ((lambda (tag) (svg-tag-make (calendar-month-name (string-to-number (substring tag 0 -1)) t) :beg 0 :end 3 :margin -1 :face 'org-date :crop-left t :crop-right t))))
;; day
("<[0-9]\\{4\\}-[0-9]\\{2\\}-\\([0-9]\\{2\\} [A-Za-z]\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 2) :face 'org-date :crop-left t :crop-right t :margin -1 ))))
;; dow
("<[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} \\([A-Za-z]\\{3\\}\>\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 1) :face 'org-date :inverse t :crop-left t :margin 0 :radius 15))))
("<[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} \\(\\([A-Za-z]\\{3\\}\\) \\([0-9\+\.]\\)\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 2) :face 'org-date :inverse t :crop-left t :crop-right t :margin -1 ))))
;; hour
("<[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [A-Za-z]\\{3\\} \\([0-9]\\{2\\}:\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 0) :radius 15 :face 'org-date :inverse t :crop-left t :crop-right t :margin -1))))
;minutes
("<[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [A-Za-z]\\{3\\} [0-9]\\{2\\}:\\([0-9]\\{2\\}\>\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 1) :radius 15 :face 'org-date :inverse t :crop-left t :margin-left -2 :margin-right 0))))
("<[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} [A-Za-z]\\{3\\} [0-9]\\{2\\}:\\([0-9]\\{2\\} [+.]\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 1) :radius 15 :face 'org-date :inverse t :crop-left t :crop-right t :margin-left -2 :margin-right 0))))
#+end_src
******* repeat and interval
#+name: svg-tag--org-datetime-repeat
#+begin_src emacs-lisp
("\\([+.]+\\)\\(\\([0-9]+[dhmwy]\\) ?\\([+.]+[0-9]+[dhmwy]\\)?\>\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (length tag) :margin -1 :face 'org-date :crop-right t :crop-left t))))
("[+.]+\\([0-9]+\\)\\(\\([dhmwy]\\) ?\\([+.]+[0-9]+[dhmwy]\\)?\>\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (length tag) :margin -1 :face 'org-date :crop-right t :crop-lef t))))
("[+.]+[0-9]+\\([dhmwy]\>\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 1 :margin-right -1 :margin-left 0 :face 'org-date :radius 15 :crop-left t))))
("[+.]+[0-9]+\\([dhmwy] \\)\\([+.]+[0-9]+[dhmwy]\>\\)" . ((lambda (tag) (svg-tag-make tag :beg 0 :end 1 :margin -1 :face 'org-date :crop-right t :crop-left t))))
("[+.]+[0-9]+[dhmwy] \\([+.]\+[0-9]+\\)[dhmwy]\>" . ((lambda (tag) (svg-tag-make tag :beg 0 :end (length tag) :margin -1 :face 'org-date :crop-right t :crop-left t))))
#+end_src
****** bring it all together
#+BEGIN_SRC emacs-lisp :tangle modules/org/pretty/config.el
(when (and (modulep! :myui svg) (modulep! :org pretty +svg))
  (after! 'svg-tag-mode)
    (setq svg-tag-tags
             `(
               <<svg-tag--org-priorities>>
               <<svg-tag--org-todo-states>>
               <<svg-tag--org-progress>>
               <<svg-tag--org-tags>>
               <<svg-tag--org-datetime>>
               )))
#+END_SRC

#+RESULTS:
| \[#A\]                                                                                  | (lambda (tag) (svg-tag-make ⚑ :beg 0 :end 1 :margin 1 :face 'orderless-match-face-1))                                                                             |   |      |                                                                                            |
| \[#B\]                                                                                  | (lambda (tag) (svg-tag-make ⇧ :beg 0 :end 1 :margin 1 :face 'orderless-match-face-3))                                                                             |   |      |                                                                                            |
| \[#C\]                                                                                  | (lambda (tag) (svg-tag-make ■ :beg 0 :end 1 :margin 1 :face 'orderless-match-face-0))                                                                             |   |      |                                                                                            |
| \[#D\]                                                                                  | (lambda (tag) (svg-tag-make D :beg 0 :end 1 :margin 1 :face 'orderless-match-face-2))                                                                             |   |      |                                                                                            |
| \[#[E-Z]\]                                                                              | (lambda (tag) (svg-tag-make tag :beg 2 :end 3 :margin 1))                                                                                                         |   |      |                                                                                            |
| *+ \(TODO\)                                                                             | (lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :inverse t :face 'org-todo :radius 8))                                                                    |   |      |                                                                                            |
| *+ \(STRT\)                                                                             | (lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :face '+org-todo-active :inverse t :radius 8))                                                            |   |      |                                                                                            |
| *+ \(WAIT\)                                                                             | (lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :inverse t :face '+org-todo-onhold :radius 8))                                                            |   |      |                                                                                            |
| *+ \(DONE\)                                                                             | (lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :face 'svg-tag-org-done :radius 8))                                                                       |   |      |                                                                                            |
| *+ \(WANT\)                                                                             | (lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :face 'org-todo :radius 8))                                                                               |   |      |                                                                                            |
| *+ \(GLOWUP\)                                                                           | (lambda (tag) (svg-tag-make tag :beg 0 :end 6 :margin 1 :face '+org-todo-onhold :radius 8))                                                                       |   |      |                                                                                            |
| *+ \(PLAYING\)                                                                          | (lambda (tag) (svg-tag-make tag :beg 0 :end 7 :margin 1 :inverse t :face '+org-todo-active :radius 8))                                                            |   |      |                                                                                            |
| *+ \(PLAYED\)                                                                           | (lambda (tag) (svg-tag-make tag :beg 0 :end 6 :margin 1 :inverse t :face 'svg-tag-org-done :radius 8))                                                            |   |      |                                                                                            |
| *+ \(ABANDONED\)                                                                        | (lambda (tag) (svg-tag-make tag :beg 0 :end 9 :margin 1 :face '+org-todo-cancel :radius 8))                                                                       |   |      |                                                                                            |
| *+ \(LIBRARY\)                                                                          | (lambda (tag) (svg-tag-make tag :beg 0 :end 7 :margin 1 :face '+org-todo-project :radius 7))                                                                      |   |      |                                                                                            |
| *+ \(KINDLE\)                                                                           | (lambda (tag) (svg-tag-make tag :beg 0 :end 6 :margin 1 :face '+org-todo-onhold :radius 6))                                                                       |   |      |                                                                                            |
| *+ \(READING\)                                                                          | (lambda (tag) (svg-tag-make tag :beg 0 :end 7 :margin 1 :inverse t :face '+org-todo-active :radius 8))                                                            |   |      |                                                                                            |
| *+ \(READ\)                                                                             | (lambda (tag) (svg-tag-make tag :beg 0 :end 4 :margin 1 :inverse t :face 'svg-tag-org-done :radius 8))                                                            |   |      |                                                                                            |
| \(\[[0-9]\{1,3\}%\]\)                                                                   | (lambda (tag) (svg-progress-percent (substring tag 1 -2)))                                                                                                        |   |      |                                                                                            |
| \(\[[0-9]+/[0-9]+\]\)                                                                   | (lambda (tag) (svg-progress-count (substring tag 1 -1)))                                                                                                          |   |      |                                                                                            |
| :#[A-Za-z0-9]+                                                                          | (lambda (tag) (svg-tag-make tag :beg 2 :radius 5 :margin 0.2))                                                                                                    |   |      |                                                                                            |
| :#[A-Za-z0-9]+:$                                                                        | (lambda (tag) (svg-tag-make tag :beg 2 :end -1 :radius 5 :margin 0.2))                                                                                            |   |      |                                                                                            |
| :@[A-Za-z0-9]+:$                                                                        | (lambda (tag) (svg-tag-make tag :beg 2 :end -1 :radius 5 :face 'smerge-lower :margin 0.2))                                                                        |   |      |                                                                                            |
| :T[X                                                                                    | L                                                                                                                                                                 | M | S]   | (lambda (tag) (svg-tag-make tag :beg 2 :end 3 :radius 20 :face 'smerge-upper :margin 0.2)) |
| :T[X                                                                                    | L                                                                                                                                                                 | M | S]:$ | (lambda (tag) (svg-tag-make tag :beg 2 :end 3 :radius 20 :face 'smerge-upper :margin 0.2)) |
| \[[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} \(\([A-Za-z]\{3\}\)? ?\([0-9]\{2\}:[0-9]\{2\}\)?\]\) | (lambda (tag) (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date :radius 6))                                                             |   |      |                                                                                            |
| \(\[[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} \)\([A-Za-z]\{3\}\)? ?\([0-9]\{2\}:[0-9]\{2\}\)?\] | (lambda (tag) (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date :radius 6))                                                           |   |      |                                                                                            |
| \(\[[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\]\)                                                | (lambda (tag) (svg-tag-make tag :beg 0 :end -1 :margin 0 :face 'org-date))                                                                                        |   |      |                                                                                            |
| \(<[0-9]\{1\}\)[0-9]\{3\}-                                                              | (lambda (tag) (svg-tag-make tag :beg 1 :end 1 :face 'org-date :radius 12 :crop-right t :margin 0))                                                                |   |      |                                                                                            |
| <\([0-9]\{4\}-\)                                                                        | (lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 1) :face 'org-date :margin -1 :crop-left t :crop-right t))                                            |   |      |                                                                                            |
| <[0-9]\{4\}-\([0-9]\{2\}-\)                                                             | (lambda (tag) (svg-tag-make (calendar-month-name (string-to-number (substring tag 0 -1)) t) :beg 0 :end 3 :margin -1 :face 'org-date :crop-left t :crop-right t)) |   |      |                                                                                            |
| <[0-9]\{4\}-[0-9]\{2\}-\([0-9]\{2\} [A-Za-z]\)                                          | (lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 2) :face 'org-date :crop-left t :crop-right t :margin -1))                                            |   |      |                                                                                            |
| <[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} \([A-Za-z]\{3\}>\)                                    | (lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 1) :face 'org-date :inverse t :crop-left t :margin 0 :radius 15))                                     |   |      |                                                                                            |
| <[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} \(\([A-Za-z]\{3\}\) \([0-9+.]\)\)                     | (lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 2) :face 'org-date :inverse t :crop-left t :crop-right t :margin -1))                                 |   |      |                                                                                            |
| <[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [A-Za-z]\{3\} \([0-9]\{2\}:\)                         | (lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 0) :radius 15 :face 'org-date :inverse t :crop-left t :crop-right t :margin -1))                      |   |      |                                                                                            |
| <[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [A-Za-z]\{3\} [0-9]\{2\}:\([0-9]\{2\}>\)              | (lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 1) :radius 15 :face 'org-date :inverse t :crop-left t :margin-left -2 :margin-right 0))               |   |      |                                                                                            |
| <[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [A-Za-z]\{3\} [0-9]\{2\}:\([0-9]\{2\} [+.]\)          | (lambda (tag) (svg-tag-make tag :beg 0 :end (- (length tag) 1) :radius 15 :face 'org-date :inverse t :crop-left t :crop-right t :margin-left -2 :margin-right 0)) |   |      |                                                                                            |
| \([+.]+\)\(\([0-9]+[dhmwy]\) ?\([+.]+[0-9]+[dhmwy]\)?>\)                                | (lambda (tag) (svg-tag-make tag :beg 0 :end (length tag) :margin -1 :face 'org-date :crop-right t :crop-left t))                                                  |   |      |                                                                                            |
| [+.]+\([0-9]+\)\(\([dhmwy]\) ?\([+.]+[0-9]+[dhmwy]\)?>\)                                | (lambda (tag) (svg-tag-make tag :beg 0 :end (length tag) :margin -1 :face 'org-date :crop-right t :crop-lef t))                                                   |   |      |                                                                                            |
| [+.]+[0-9]+\([dhmwy]>\)                                                                 | (lambda (tag) (svg-tag-make tag :beg 0 :end 1 :margin-right -1 :margin-left 0 :face 'org-date :radius 15 :crop-left t))                                           |   |      |                                                                                            |
| [+.]+[0-9]+\([dhmwy] \)\([+.]+[0-9]+[dhmwy]>\)                                          | (lambda (tag) (svg-tag-make tag :beg 0 :end 1 :margin -1 :face 'org-date :crop-right t :crop-left t))                                                             |   |      |                                                                                            |
| [+.]+[0-9]+[dhmwy] \([+.]+[0-9]+\)[dhmwy]>                                              | (lambda (tag) (svg-tag-make tag :beg 0 :end (length tag) :margin -1 :face 'org-date :crop-right t :crop-left t))                                                  |   |      |                                                                                            |

*** Quality of Life
**** . load modules
#+BEGIN_SRC emacs-lisp :tangle modules/org/qol/config.el
(dolist (flag (doom-module :org 'qol :flags))
  (load! (concat "contrib/" (substring (symbol-name flag) 1)) nil t))
#+END_SRC
**** more priorities
#+BEGIN_SRC emacs-lisp :tangle modules/org/qol/config.el
(setq
 org-lowest-priority 69
 org-default-priority 69
 )
#+END_SRC
**** org-checklist
Reset the check-boxes in the repeating task.
#+BEGIN_SRC emacs-lisp :tangle modules/org/qol/contrib/checklist.el
(require 'org-checklist)
#+END_SRC
Add property ~RESET_CHECK_BOXES~ and set it to ~t~
***** =chkrst= snippet
#+BEGIN_SRC snippet :tangle "snippets/org-mode/property-reset-checklist"
# -*- mode: snippet -*-
# name: property-reset-checklist
# key: chkrst
# --
:PROPERTIES:
:RESET_CHECK_BOXES: t
:END:
#+END_SRC
**** swap ~SPC o a~ and ~SPC o A~
we always want to launch ~org-agenda~ and rarely other commands
#+BEGIN_SRC emacs-lisp :tangle modules/org/qol/config.el
(map! :leader
      (:prefix-map ("o" . "open")
                   :desc "Org Agenda"  "a" #'org-agenda
        (:prefix-map ("A" . "org agenda")
        :desc "Agenda"         "a"  #'org-agenda
        :desc "Todo list"      "t"  #'org-todo-list
        :desc "Tags search"    "m"  #'org-tags-view
        :desc "View search"    "v"  #'org-search-view)
        ))
#+END_SRC
**** calfw
 calendar framework for Emacs
#+BEGIN_SRC emacs-lisp :tangle modules/org/qol/packages.el
(when
    (modulep! :org qol +calfw)
  (package! calfw
    :recipe (:host github :repo "kiwanami/emacs-calfw"))
  (package! calfw-org
    :recipe (:host github :repo "kiwanami/emacs-calfw")))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle modules/org/qol/contrib/calfw.el
(require 'calfw)
(require 'calfw-org)
#+END_SRC

#+RESULTS:
: calfw

*** drawing
#+BEGIN_SRC emacs-lisp :tangle modules/org/draw/packages.el
(when
    (modulep! :org draw +krita)
  (package! org-krita
    :recipe (:host github
             :repo "kvineet/org-krita"
             :files ("resources" "resources" "*.el" "*.el"))))
(when
    (modulep! :org draw +excalidraw)
  (package! org-excalidraw
  :recipe (:host github :repo "wdavew/org-excalidraw")))
#+END_SRC
**** =Krita= integration
There are problems in this package to work on.
#+BEGIN_SRC emacs-lisp :tangle modules/org/draw/config.el
(when
    (modulep! :org draw +krita)
  (use-package! org-krita
    :config
    (setq org-krita-user-template-file
          (expand-file-name "krita/templates/Mine/.source/org-notes.kra" (or (getenv "XDG_DATA_HOME")
                                                                             (expand-file-name ".local/share" (getenv "HOME")))))))
#+END_SRC
**** =excalidraw= integration
#+BEGIN_SRC emacs-lisp :tangle modules/org/draw/config.el
(when
    (modulep! :org draw +excalidraw)
  (use-package! org-excalidraw))
#+END_SRC

*** denote
#+begin_quote
 Denote is a simple note-taking tool for Emacs. It is based on the idea that notes should follow a predictable and descriptive file-naming scheme. The file name must offer a clear indication of what the note is about, without reference to any other metadata. Denote basically streamlines the creation of such files while providing facilities to link between them.
https://github.com/protesilaos/denote
#+end_quote
File organization should not become the task on in itself. With systems like =roam= or =zetteldesk=, instead of dumping the data into second brain, I spent lot of time creating perfect system.

Moving to the denote has simplified the life a lot.
#+BEGIN_SRC emacs-lisp :tangle "modules/org/denote/packages.el"
;; -*- no-byte-compile: t; -*-
<<license>>

(package! denote)
(package! denote-menu :recipe (:host github :repo "namilus/denote-menu"))
(package! denote-org :recipe (:host github :repo "protesilaos/denote-org"))
(when
    (modulep! :org denote +silo)
  (package! denote-silo
    :recipe (:host github :repo "protesilaos/denote-silo")))
(when
    (modulep! :org denote +consult)
  (package! consult-denote
    :recipe (:host github :repo "protesilaos/consult-denote")))
(when
    (modulep! :org denote +journal)
  (package! denote-journal
    :recipe (:host github :repo "kvineet/denote-journal")))
#+end_src
Lets configure it the way we want

**** configure denote
#+BEGIN_SRC emacs-lisp :tangle "modules/org/denote/config.el"
;;; -*- lexical-binding: t; -*-
<<license>>

;; Remember to check the doc strings of those variables.
(use-package! denote
  :config
  (setq denote-known-keywords '("emacs" "philosophy" "politics" "economics")
        denote-infer-keywords t
        denote-sort-keywords t
        denote-file-type nil  ; org is default
        denote-prompts '(title keywords)
        denote-date-prompt-use-org-read-date t
        denote-allow-multi-word-keywords t
        denote-date-format nil
        denote-link-fontify-backlinks t
        denote-rename-buffer-format "%t [%i]")

  (add-hook 'dired-mode-hook #'denote-dired-mode)
  (add-hook 'org-mode-hook #'denote-rename-buffer-mode))


(defun denote-note-with-name (NAME &optional SILO)
   "finds the denote file given its name"
   (let ((SILO (if SILO SILO denote-directory)))
     (nth 0 (directory-files SILO t (denote-sluggify-title NAME) t 1))))

(map!
 :leader
 (:prefix-map ("f" . "file")
  :desc "rename (denote)" "r" #'denote-rename-file
  :desc "rename using front matter" "x" #'denote-rename-file-using-front-matter)
 (:prefix-map ("n" . "notes")
  :desc "add with denote" "a" #'denote
  :desc "denote in subdirectory" "d" #'denote-subdirectory))
#+end_src
**** . load modules
#+BEGIN_SRC emacs-lisp :tangle modules/org/denote/config.el
(dolist (flag (doom-module :org 'denote :flags))
  (load! (concat "contrib/" (substring (symbol-name flag) 1)) nil t))
#+END_SRC

**** journal
#+BEGIN_SRC emacs-lisp :tangle modules/org/denote/contrib/journal.el
;;; -*- lexical-binding: t; -*-
<<license>>
(use-package! denote-journal
  :config
  (setq denote-journal-title-format "%A, %d %B %Y")
  )
(map!
 :leader
 :map global-map
 :desc "denote journal" "n j" #'denote-journal-new-or-existing-entry)
#+END_SRC
**** consult-denote
#+BEGIN_SRC emacs-lisp :tangle modules/org/denote/contrib/consult.el
;;; -*- lexical-binding: t; -*-
<<license>>
(map!
 :leader
 :map global-map
 :desc "consult notes" "s n" #'consult-denote-grep)
#+END_SRC
**** silos
#+BEGIN_SRC emacs-lisp :tangle modules/org/denote/contrib/silo.el
;;; -*- lexical-binding: t; -*-
<<license>>
(require 'denote-silo)
(map!
 :leader
 :map global-map
 :desc "denote in silo" "n s" #'denote-silo-create-note)
#+END_SRC
**** denote-menu
#+BEGIN_SRC emacs-lisp :tangle modules/org/denote/contrib/menu.el
(use-package! denote-menu
  :config
  (setq denote-directory-files-matching-regexp denote-menu-initial-regex)
  (map!
   :leader
   :map global-map
   :desc "denote list" "n z" #'list-denotes)
  (map!
   :map denote-menu-mode-map
   :desc "clear filters" :nv "c" #'denote-menu-clear-filters
   :desc "filter" :nv "/" #'denote-menu-filter
   :desc "filter by keyword" :nv "k" #'denote-menu-filter-by-keyword
   :desc "filter out keyword" :nv "o" #'denote-menu-filter-out-keyword
   :desc "journal entires" :nv "j" #'my/jounal-files
   :desc "non journal files" :nv "d" #'my/nonjounal-files
   :desc "export to dired" :nv "e" #'denote-menu-export-to-dired)
  (set-popup-rule! "^\\*Denote" :ignore t))

(when
    (modulep! :org denote +silo)
(defun list-denotes-select-silo (&optional silo)
  "Select SILO and run `list-denote' in it.
SILO is a file path from `denote-silo-directories'

When called from Lisp, SILO is a file system path to a directory that
conforms with `denote-silo-path-is-silo-p'."
  (interactive
   (list
    (denote-silo-directory-prompt)
    ))
  (denote-silo-with-silo silo
    (let ((denote-directory silo))
      (list-denotes))))
(map!
   :leader
   :map global-map
   :desc "denote silo list" "n Z" #'list-denotes-select-silo))
#+end_src

*** org-protocol
#+BEGIN_SRC emacs-lisp :tangle modules/org/protocol/config.el
(require 'org-protocol)
#+END_SRC

*** org export
#+BEGIN_SRC emacs-lisp :tangle modules/org/export/packages.el
(package! ox-epub)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle modules/org/export/config.el
(require 'ox-epub)
#+END_SRC

** \[LaTeX\] Modules
\[
e = mc^2
\]
*** auto expanding snippets
#+BEGIN_SRC emacs-lisp :tangle "modules/latex/default/packages.el"
;; -*- no-byte-compile: t; -*-
<<license>>

(package! aas)
(package! laas)
#+end_src
*** Font lock processing
#+BEGIN_SRC emacs-lisp :tangle "modules/latex/default/packages.el"
(package! engrave-faces)
(package! ox-chameleon
  :recipe (:host github :repo "tecosaur/ox-chameleon"))
#+end_src
*** enable by default
#+BEGIN_SRC emacs-lisp :tangle modules/latex/default/config.el
(setq! org-startup-with-latex-preview 'latexpreview)
#+END_SRC

#+RESULTS:

** Dev
*** leetcode
#+BEGIN_SRC emacs-lisp :tangle modules/dev/leetcode/packages.el
(package! leetcode
  :recipe (:host github :repo "kaiwk/leetcode.el"))
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle modules/dev/leetcode/config.el
(use-package! leetcode
  :config
  (add-hook 'leetcode-solution-mode-hook
            (lambda() (flycheck-mode -1)))
  (setq leetcode-prefer-language "rust"
        leetcode-prefer-sql "mysql"
        leetcode-save-solutions t
        leetcode-directory "~/projects/leetcode"))
#+END_SRC
* Workarounds
** =lsp-mode= doesn't ignore =.devenv/=
=lsp-mode= defines a list of directories to ignore by default. It also has support for =direnv=, but we are using =devenv=.
doing this as a list, if any other directories needs ignoring in future.
#+BEGIN_SRC emacs-lisp :tangle config.el
(after! lsp-mode
  (dolist (dir '("[/\\\\]\\.devenv\\'"))
    (push dir lsp-file-watch-ignored-directories)))
#+END_SRC

#+RESULTS:

* Configuration
Configuration that can not be a module
** Org mode
*** =todo= sequence
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "STRT(s)" "WAIT(w)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
       (sequence "PROJ(p)" "LOOP(r)" "IDEA(i)" "|" "DONE(d)" "KILL(k)")
       (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
       (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))
#+end_src
*** agenda
**** Some files are never meant to getting stuck
Don't want things in stuck projects that can never get stuck. There probably is
better way of doing this in future. But for now, we use a special tag =:NOTSTUCK:=

Any heading marked with =:NOTSTUCK:= will not constitute a project. In practice we add ~filetags~ with value ~:NOTSTUCK:~ to the org file.

Denote uses ~filetags~ in front matter to generate its file naming scheme, but we do not want ~notstuck~ appearing in the file names.

In such cases, put two declarations of the ~filetag~ in front matter. Denote will only pick first declaration, while subsequent declarations would get ignored by denote.
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-stuck-projects '("+LEVEL=2-NOTSTUCK/-DONE-KILL"
                           ("TODO" "NEXT" "NEXTACTION")
                           nil ""))
#+END_SRC
**** Custom Agenda
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-agenda-custom-commands
      '(("d" "Today"
         ((agenda "" ((org-agenda-start-day "")
                      (org-agenda-span 'day)
                      (org-deadline-warning-days 7)
                      (org-agenda-scheduled-leaders '("" "Sched.%2dx: "))
                      (org-agenda-overriding-header "Today")))
          (tags-todo "+PRIORITY=\"A\""
                     ((org-agenda-overriding-header "Urgent and Important")))
          (tags-todo "+PRIORITY=\"B\""
                     ((org-agenda-overriding-header "Urgent Not Important")))
          (tags-todo "+PRIORITY=\"C\""
                     ((org-agenda-overriding-header "Not Urgent But Important")
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))))
        ("m" "Mobile tasks"
         ((tags-todo "+@mobile"
                     ((org-agenda-prefix-format "%t%s")
                      (org-agenda-sorting-strategy '(tag-up priority-down))
                      (org-agenda-todo-keyword-format ""))))
         ((org-agenda-with-colors nil)
          (org-agenda-compact-blocks t)
          (org-agenda-remove-tags t))
         ("~/mobile.txt"))
        ("v" . "Views")
        ("vd" "Downloads View"
         ((tags-todo "/!WANT"
                     ((org-agenda-overriding-header "Download Tasks"))))
         ((org-agenda-files (directory-files (denote-directory) 'full (rx "goblin") nil))))
        ("vm" "Maintainance View"
         ((tags-todo "+@maint"
                     ((org-agenda-overriding-header "Maintainance Tasks")
                      (org-agenda-span 'week))))
         ((org-agenda-files (directory-files (denote-directory) 'full (rx "_project") nil))))
        ("vl" "Learning View"
         ((tags-todo "+@learn"
                     ((org-agenda-overriding-header "Learning Tasks")))))
        ("vc" "Cleaning View"
         ((tags-todo "+@clean"
                     ((org-agenda-overriding-header "Cleaning Tasks")))))
        ("vt" "Tinkering View"
         ((tags-todo "+@tink"
                     ((org-agenda-overriding-header "Tinkering Tasks")))))
        ("r" "Reading"
         ((tags-todo "+#25"
                     ((org-agenda-overriding-header "2025 Reading List")))
          (tags-todo "/!WANT"
                     ((org-agenda-overriding-header "Books to Download"))))
         ((org-agenda-hide-tags-regexp ".*")
          (org-agenda-files (directory-files (denote-directory) t "_books" nil))
          ;; TODO org-agenda-files only books
          (org-agenda-prefix-format '((tags . "")))))
        ("p" "Planning"
         ((tags-todo
           "+@planning"
           ((org-agenda-overriding-header "Planning Tasks")
            (org-agenda-hide-tags-regexp
             (regexp-opt '("gtd" "TODO" "@planning")))
            (org-agenda-skip-function
             '(org-agenda-skip-entry-if 'scheduled))))
          (tags-todo "-{@.*}"
                     ((org-agenda-overriding-header "Untagged Tasks")
                      (org-agenda-hide-tags-regexp
                       (regexp-opt '("gtd" "TODO" "@planning")))
                      (org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'scheduled))))))
        ("#" "Stuck Projects"
         ((org-ql-block '(and (or (tags "project")
                                  (todo "PROJ"))
                              (or (todo)
                                  (descendants (todo)))
                              (not (parent))
                              (not (todo "HOLD" "WAIT"))
                              (not (tags "NOTSTUCK"))
                              (not (done))
                              (not (planning)))
                        ((org-ql-block-header "Stuck")))
          (org-ql-block '(and (todo "HOLD" "WAIT")
                              (not (tags "NOTSTUCK"))
                              (not (done))
                              (not (planning)))
                        ((org-ql-block-header "Awaited")))))))
#+END_SRC
*** silos
For now journals live in denote directory. It might change later.
I have defined 2 silos default and =work= for now.
 - [ ] TODO silo integration
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq
 denote-silo-directories
      (list
       (denote-directory)
       denote-journal-directory
       (vk/org-directory "work")
       (vk/org-directory "games")))
#+END_SRC
*** =excalidraw= directory
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-excalidraw-directory (vk/sync-directory "excalidraw"))
#+END_SRC
*** capture templates
**** inbox
New todo items, ideas and links go to ~inbox.org~, then ingest it in as part of daily review.
#+name: org-capture-inbox
#+BEGIN_SRC emacs-lisp
("t" "todo" entry (file ,(vk/org-directory "inbox.org"))
 "* TODO %?")
("i" "idea" entry (file ,(vk/org-directory  "inbox.org"))
 "* IDEA %?")
("l" "link" entry (file ,(vk/org-directory "inbox.org"))
 "* TODO %(org-cliplink-capture)" :immediate-finish t)
#+END_SRC
**** clock in
While working on something while clocked in, capture notes quickly
#+name: org-capture-clockin
#+BEGIN_SRC emacs-lisp
("c" "Current clock in" item (clock)
 "- %U %?")
#+END_SRC
**** journal
Make journal entries from anywhere.
#+name: org-capture-journal
#+BEGIN_SRC emacs-lisp
("j" "Journal entry" entry (file ,(denote-journal-path-to-new-or-existing-entry))
 "* %? \n%U [[%f]]")
("a" "Montesary Activity" entry (file ,(denote-note-with-name "Montessori Workshop Feb 2025"))
 "* Day %? \n")
#+END_SRC
**** support org-protocol
#+name: org-capture-protocol
#+BEGIN_SRC emacs-lisp
("z" "org-protocol-capture" entry (file ,(vk/org-directory "inbox.org"))
 "* TODO [[%:link][%:description]]\n\n %i" :immediate-finish t)
("Z" "org-protocol-capture" entry (file ,(vk/org-directory "inbox.org"))
 "* TODO [[%:link][%:description]]\n\n %i" :immediate-finish t)
#+END_SRC
**** . bring it all together
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-capture-templates
      `(
        <<org-capture-inbox>>
        <<org-capture-clockin>>
        <<org-capture-journal>>
        <<org-capture-protocol>>
        ))
#+END_SRC
*** =org-archive= default command
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq! org-archive-default-command 'org-archive-to-archive-sibling)
#+END_SRC
** calibre
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq calibredb-root-dir ebooks-root-directory
      calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir)
      calibredb-format-all-the-icons t)
#+END_SRC

#+RESULTS:
: t

* Snippets
** Daily review
#+BEGIN_SRC snippet :tangle "snippets/org-mode/review-daily"
# -*- mode: snippet -*-
# name: review-daily
# key: rd
# --
,* Daily Review
,** [ ] Go through pending items and reschedule
,** [ ] note down idea/projects etc
,** [ ] plan next day from
#+END_SRC
** Weekly review
#+BEGIN_SRC snippet :tangle "snippets/org-mode/review-weekly"
# -*- mode: snippet -*-
# name: review-weekly
# key: rw
# --
,* Weekly Review
,** [ ] review completed items
,** [ ] note down unplanned work that got completed
,** [ ] Review stuck projects
,** [ ] plan goals for the week
#+END_SRC
** Monthly review
#+BEGIN_SRC snippet :tangle "snippets/org-mode/review-monthly"
# -*- mode: snippet -*-
# name: review-monthly
# key: rm
# --
,* Monthly Review
,** [ ] Review goal completion rate
,** [ ] review unplanned tasks
,** [ ] Review all notes to find any missing activities
,** [ ] plan next month goals
#+END_SRC

* Local
buffer local words that I don't want in my personal dictionary
#  LocalWords:  KVineet Modline modline Prettification leetcode LeetCode
* Archive :ARCHIVE:
No longer in use. will delete at some point
** =org-roam=
:PROPERTIES:
:ARCHIVE_TIME: 2025-04-17 Thu 11:03
:END:
*** helper functions
**** add property for dailies
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun vk/org-roam-directory--daily-p ()
  "Return t if org-roam-directory is in daily note mode"
  (equal
   (file-name-nondirectory (directory-file-name org-roam-directory))
   (directory-file-name my/dailies-directory)))
(defun vk/ledger-path-relative-to-org ()
  (f-relative
   (expand-file-name my/dailies-directory ledger-directory)
   (expand-file-name my/dailies-directory org-roam-directory)))
(defun vk/add-auto-props-to-org-roam-dailies ()
   "Add properties to org-roam daily entry automatically"
   (unless (file-exists-p (buffer-file-name))
     (when (vk/org-roam-directory--daily-p)
       (unless (org-find-property "header-args:ledger")
         (org-roam-add-property
          (concat
           (file-name-as-directory (vk/ledger-path-relative-to-org))
           (file-name-base (buffer-file-name)) ".ledger")
          "header-args:ledger")
         (org-roam-add-property ":tangle" "header-args:ledger")))))
 (add-hook! 'org-roam-capture-new-node-hook #'vk/add-auto-props-to-org-roam-dailies)
#+END_SRC
*** daily templates
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-roam-dailies-capture-templates '(("d" "default" entry "* %?\n<%<%Y-%m-%d %a %H:%M>>"
                                            :if-new (file+head "%<%Y-%m-%d>.org"
                                                               "#+title: %<%A, %d %B %Y>")
                                            :unnarrowed t)))
#+END_SRC
*** capture templates
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-roam-capture-templates '(
                                   ("d" "default" entry "* %?"
                                    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
                                    :unnarrowed t)
                                   ("p" "Person" entry
                                    "* %?"
                                    :target (file+head "people/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :person:\n#+date: %u\n")
                                    :unnarrowed t)
                                   ("h" "Hypothesis" entry
                                    "* %?"
                                    :target (file+head "hypothesis/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :hypothesis:\n#+date: %u\n")
                                    :unnarrowed t)
                                   ("n" "Notes" entry
                                    "* %? \n%(format-time-string (org-time-stamp-format t) (time-stamp))\n"
                                    :target (file+head "notes/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :notes:\n#+date: %u\n")
                                    :unnarrowed t)
                                   ("w" "Work" entry
                                    "* %?\n%(format-time-string (org-time-stamp-format t) (time-stamp))\n"
                                    :target (file+datetree "worklog/%<%Y%m%d%H%M%S>-${slug}.org" month)
                                    :unnarrowed t)
                                   ))
#+END_SRC
*** =org-protocol= capture templates
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-roam-capture-ref-templates
      '(("r" "ref" plain "%?"
         :if-new (file+head "literature/${slug}.org"
                            "#+title: ${title}
,#+roam_key: ${ref}")
         :unnarrowed t
         :immediate-finish t)))
#+END_SRC
*** build =org-agenda=
**** =org-roam= nodes with @project tag
#+BEGIN_SRC emacs-lisp :tangle config.el
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))
(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (my/org-roam-list-notes-by-tag "project")))
#+END_SRC

#+RESULTS:
: my/org-roam-refresh-agenda-list

**** COMMENT TODO Add @project tag for files with #TODO items
#+BEGIN_SRC emacs-lisp :tangle config.el
(add-hook 'find-file-hook #'vulpea-project-update-tag)
(add-hook 'before-save-hook #'vulpea-project-update-tag)

(defun vulpea-project-update-tag ()
      "Update PROJECT tag in the current buffer."
      (when (and (not (active-minibuffer-window))
                 (vulpea-buffer-p))
        (save-excursion
          (goto-char (point-min))
          (let* ((tags (vulpea-buffer-tags-get))
                 (original-tags tags))
            (if (vulpea-project-p)
                (setq tags (cons "project" tags))
              (setq tags (remove "project" tags)))

            ;; cleanup duplicates
            (setq tags (seq-uniq tags))

            ;; update tags if changed
            (when (or (seq-difference tags original-tags)
                      (seq-difference original-tags tags))
              (apply #'vulpea-buffer-tags-set tags))))))

(defun vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))
#+END_SRC
**** COMMENT exclude @project tag from inheritance
#+BEGIN_SRC emacs-lisp :tangle config.el
(add-to-list 'org-tags-exclude-from-inheritance "project")
#+END_SRC
*** COMMENT encryption
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq org-roam-encrypt-files t)
#+END_SRC
** =zetteldesk=
:PROPERTIES:
:ARCHIVE_TIME: 2025-04-17 Thu 11:03
:END:
*** Install package
#+BEGIN_SRC emacs-lisp :tangle packages.el
;; ~/.doom.d/packages.el
(package! zetteldesk
  :recipe (:host github :repo "Vidianos-Giannitsis/zetteldesk.el"))
#+END_SRC
*** COMMENT Configuration
#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package! zetteldesk
  :after org-roam
  :config
  (setq zetteldesk-kb-hydra-prefix (kbd "C-c z"))
  (zetteldesk-mode)
  (require 'zetteldesk-kb))
#+END_SRC
** Elfeed
:PROPERTIES:
:ARCHIVE_TIME: 2025-04-17 Thu 11:03
:END:
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! elfeed-goodies)
#+END_SRC
Configure Elfeed goodies
#+BEGIN_SRC emacs-lisp :tangle config.el
(require 'elfeed-goodies)
(elfeed-goodies/setup)
(setq elfeed-goodies/entry-pane-size 0.5)
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
#+END_SRC
** =systemd= unit
:PROPERTIES:
:ARCHIVE_TIME: 2025-04-17 Thu 11:03
:END:
** Workarounds
:PROPERTIES:
:ARCHIVE_TIME: 2025-04-17 Thu 11:03
:END:
*** [#D] hydra is better for =read-action=
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+END_SRC
** org-pretty-tags
:PROPERTIES:
:ARCHIVE_TIME: 2025-04-17 Thu 11:03
:END:
#+BEGIN_SRC emacs-lisp :tangle packages.el
(package! org-pretty-tags)
#+END_SRC
** Disable perspective mode from launching new workspace
:PROPERTIES:
:ARCHIVE_TIME: 2025-04-17 Thu 11:03
:END:
#+BEGIN_SRC emacs-lisp :tangle config.el
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+END_SRC
