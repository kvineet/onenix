#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle init.el :mkdirp yes
 
* Welcome!
#+BEGIN_QUOTE
This is the configuration based on the *Emacs From Scratch* series by =david at systemcrafters.cc=.
#+END_QUOTE
Lets add a header for =init.el= file.
#+begin_src emacs-lisp
  
  ;; -*- lexical-binding: t -*-
  ;; NOTE: This file is generated from emacs.org using org-babel-tangle.
  ;;       DO NOT EDIT directly. 

#+end_src
* Quick Settings
Here we define some variables, that we would want to quickly change without hunting for it in the file.
#+begin_src emacs-lisp
  (defvar vk/default-font-size 180)
  (defvar vk/default-variable-font-size 180)
  (defvar vk/default-font "Iosevka Term Extended")
  (defvar vk/fixed-pitch-font "Iosevka Extended")
  (defvar vk/variable-pitch-font "Iosevka")
  (defvar vk/sync-directory (file-name-as-directory
  			   (concat
  			    (file-name-as-directory (getenv "HOME")) "sync")))
  (defvar vk/org-directory (file-name-as-directory
  			  (concat
  			   (file-name-as-directory vk/sync-directory) "org")))
#+end_src
* Package System Setup
Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.
** COMMENT using =package.el=
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src
** Using =straight.el=
While =melpa= and =elpa= are great, many packages are not on there. We want to get it [[https://github.com/radian-software/straight.el][straight]] from git.
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
* Basic UI Configuration
This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** Font Configuration

I am using the Iosevka ftps://fonts.googlont for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font vk/default-font :height vk/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font vk/fixed-pitch-font :height vk/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font vk/variable-pitch-font :height vk/default-font-size :weight 'regular)
#+end_src

* Keybinding Configuration
** general.el
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.
#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :straight t
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"
      ))
#+end_src
** lets be evil
This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
[[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.
#+begin_src emacs-lisp
    (use-package evil
      :straight t
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

    (use-package evil-collection
      :straight t
      :after evil
      :config
      (evil-collection-init))
#+end_src
** File operations
#+begin_src emacs-lisp
  (defun vk/find-org-config-file()
      "calls =find-file= for =emacs.org= file in =user-emacs-directory="
      (interactive)
       (find-file (concat
  		user-emacs-directory
  		"emacs.org")))

  (rune/leader-keys
    :keymaps '(normal emacs)
    "f" '(:ignore t :which-key "files")
    "ff" '(find-file :which-key "find file")
    "fs" '(save-buffer :which-key "save file")
    "fp" '(vk/find-org-config-file :which-key "Open config file"))
#+end_src
** buffer, frames and windows
#+begin_src emacs-lisp
  (rune/leader-keys
      :keymaps '(normal emacs)
      "b" '(:ignore t :which-key "buffers")
      "bb" '(counsel-switch-buffer :which-key "switch buffer")
      "bd" '(kill-current-buffer :which-key "delete buffer")
      "bs" '(save-buffer :which-key "save buffer")
      
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme"))
#+end_src
* UI Configuration
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp
  (use-package command-log-mode
    :straight t
    )
#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :straight t
    :init (load-theme 'doom-dracula t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons
    :straight t
    )

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :straight t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

** vertico and consult
[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system.
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (setq vertico-scroll-margin 0)
  (setq vertico-count 17)
  (vertico-mode))
#+end_src
*** savehist
Lets save history and suggest last used commands above others.
#+begin_src emacs-lisp
(use-package savehist
  :straight t
  :init
  (savehist-mode))
#+end_src
*** nerd-iconds in completion
Use icons in vertico buffer
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :straight t
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src
** COMMENT Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))

    (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :config
      (counsel-mode 1))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :straight t
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling
This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra
    :straight t
    )

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    :keymaps '(normal emacs)
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.
#+begin_src emacs-lisp
  (defvar vk/org-config-hook nil
    "Hook called as part of :config part of use-package org")
#+end_src
** Basic Org Config
This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.
#+begin_src emacs-lisp
  (defun vk/org-file(FILE)
    "Returns path of specified file in =org= directory"
    (concat vk/org-directory FILE))

  (defun vk/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :straight t
    :hook (org-mode . vk/org-mode-setup)
    :config
    (setq org-ellipsis "⤵️")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
  	  '((vk/org-file "todo.org")
  	    (vk/org-file "habits.org")
  	    (vk/org-file "Birthdays.org")))

    (run-hooks 'vk/org-config-hook)
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
  	(sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
  	("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
  	 ; Put mutually exclusive tags here
  	 (:endgroup)
  	 ("@errand" . ?E)
  	 ("@home" . ?H)
  	 ("@work" . ?W)
  	 ("agenda" . ?a)
  	 ("planning" . ?p)
  	 ("publish" . ?P)
  	 ("batch" . ?b)
  	 ("note" . ?n)
  	 ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
  	(todo "NEXT"
  	  ((org-agenda-overriding-header "Next Tasks")))
  	(tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
  	  ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
  	(org-agenda-max-todos 20)
  	(org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
  	      ((org-agenda-overriding-header "Waiting on External")
  	       (org-agenda-files org-agenda-files)))
  	(todo "REVIEW"
  	      ((org-agenda-overriding-header "In Review")
  	       (org-agenda-files org-agenda-files)))
  	(todo "PLAN"
  	      ((org-agenda-overriding-header "In Planning")
  	       (org-agenda-todo-list-sublevels nil)
  	       (org-agenda-files org-agenda-files)))
  	(todo "BACKLOG"
  	      ((org-agenda-overriding-header "Project Backlog")
  	       (org-agenda-todo-list-sublevels nil)
  	       (org-agenda-files org-agenda-files)))
  	(todo "READY"
  	      ((org-agenda-overriding-header "Ready for Work")
  	       (org-agenda-files org-agenda-files)))
  	(todo "ACTIVE"
  	      ((org-agenda-overriding-header "Active Projects")
  	       (org-agenda-files org-agenda-files)))
  	(todo "COMPLETED"
  	      ((org-agenda-overriding-header "Completed Projects")
  	       (org-agenda-files org-agenda-files)))
  	(todo "CANC"
  	      ((org-agenda-overriding-header "Cancelled Projects")
  	       (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
  	("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
  	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

  	("j" "Journal Entries")
  	("jj" "Journal" entry
  	     (file+olp+datetree (vk/org-file "Journal.org"))
  	     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
  	     ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
  	     :clock-in :clock-resume
  	     :empty-lines 1)
  	("jm" "Meeting" entry
  	     (file+olp+datetree (vk/org-file "Journal.org"))
  	     "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
  	     :clock-in :clock-resume
  	     :empty-lines 1)

  	("w" "Workflows")
  	("we" "Checking Email" entry (file+olp+datetree (vk/org-file "Journal.org"))
  	     "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

  	("m" "Metrics Capture")
  	("mw" "Weight" table-line (file+headline (vk/org-file "Metrics.org") "Weight")
  	 "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj"))))
#+end_src
** Pretification
*** svg are pretty
#+begin_src emacs-lisp 
  (use-package svg-lib
    :straight (svg-lib
  		 :type git
  		 :host github
  		 :repo "rougier/svg-lib"))
#+end_src
*** Better bullets with =org-superstar=
#+begin_src emacs-lisp
  (use-package org-superstar
  	      :straight t
  	      :config
  	      ;; Enable org-superstar mode for all org files
  	      (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  	      ;; Set the bullet list to use unicode symbols
  	      (setq org-superstar-headline-bullets-list '("💠" "🔘" "🔷" "🟦")))
#+end_src
*** COMMENT margin markers with =org-margin=
#+begin_src emacs-lisp
  (add-hook 'vk/org-config-hook
  	  (lambda() 
  	    (use-package org-margin
  	      :straight (org-margin
  			 :type git
  			 :host github
  			 :repo "rougier/org-margin")
  	      :config
  	      (add-hook 'org-mode-hook (lambda () (org-margin-mode 1))))))
#+end_src
*** COMMENT Nicer Heading Bullets
[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :straight t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("?" "?" "?" "?" "?" "?" "?")))

#+end_src

#+RESULTS:

*** TODO svg
*** TODO Latex
SCHEDULED: <2024-01-10 Wed>
org-fragtog 
*** TODO editable markup
*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun vk/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :straight t
    :hook (org-mode . vk/org-mode-visual-fill))

#+end_src

*** Better Font Faces

The =vk/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun vk/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "〰️"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.4)
                    (org-level-2 . 1.3)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.15)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)
                    (org-document-title . 2.0)))
      (set-face-attribute (car face) nil :font "Iosevka" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  (vk/org-font-setup)
#+end_src

#+RESULTS:

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =vk/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

 #+begin_src emacs-lisp

   ;; Automatically tangle our Emacs.org config file when we save it
   (defun vk/org-babel-tangle-config ()
     (when (string-equal (buffer-file-name)
                         (expand-file-name "~/.config/emacs/emacs.org"))
       ;; Dynamic scoping to the rescue
       (let ((org-confirm-babel-evaluate nil))
         (org-babel-tangle-file (buffer-file-name)))))

   (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'vk/org-babel-tangle-config)))

#+end_src
** Presentation
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :straight (org-tree-slide
  		 :type git
  		 :host github
  		 :repo "takaxp/org-tree-slide"))
  (defhydra hydra-org-tree-slide ()
    "Presentation mode"
    ("j" org-tree-slide-move-previous-tree "previous")
    ("k" org-tree-slide-move-next-tree "next")
    ("q" org-tree-slide-mode "quit" :exit t))
  (defun vk/presentation-with-org-tree-slide()
    "starts org-tree-slide-mode with hydra"
    (interactive
    (progn (org-tree-slide-mode)
  	 (hydra-org-tree-slide/body))))
  (rune/leader-keys
    :keymaps '(normal org-mode)
    "m" '(:ignore t :which-key "<localleader>")
    "mt" '(:ignore t :which-key "toggle")
    "mtp" '(vk/presentation-with-org-tree-slide :which-key "presentation"))
#+end_src

#+RESULTS:

* Development
** Projectile
[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.
#+begin_src emacs-lisp

  (use-package projectile
    :straight t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :straight t
    :config (counsel-projectile-mode))

#+end_src
** Magit
[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.
#+begin_src emacs-lisp

  (use-package magit
    :straight t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src
*** TODO evil magit

#+RESULTS:

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :straight t
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* COMMENT Applications
** Some App

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp

  (+ 55 100)

#+end_src

#+begin_src conf :tangle .config/some-app/config :noweb yes


#+end_src
